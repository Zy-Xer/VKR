import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk, UnidentifiedImageError
import pytesseract
import os
import cv2
import numpy as np
import requests
import json

# –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
# pip install -r requirements.txt

class ChuvashOCRApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á—É–≤–∞—à—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞") 
        self.root.configure(bg="#fff5e0")

        # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud Translate API ---
        self.yandex_cloud_api_token = ""
        self.yandex_cloud_folder_id = ""
        # --- –ö–æ–Ω–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Yandex Cloud Translate API ---

        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_rowconfigure(4, weight=2)  # OCR text box
        self.root.grid_rowconfigure(6, weight=2)  # Translation text box
        self.root.grid_columnconfigure(0, weight=1)

        self.canvas_frame = tk.Frame(self.root, bg="#fff5e0")
        self.canvas_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=(10, 0))
        self.canvas_frame.grid_rowconfigure(0, weight=1)
        self.canvas_frame.grid_columnconfigure(0, weight=1)

        self.canvas = tk.Canvas(self.canvas_frame, bg="#f0f0f0", highlightthickness=1, highlightbackground="gray")
        self.canvas.grid(row=0, column=0, sticky="nsew")

        self.label = tk.Label(self.root, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", font=("Arial", 12, "bold"),
                              bg="#fff5e0", fg="#a80000")
        self.label.grid(row=1, column=0, sticky="n", pady=(5, 5))

        self.char_frame = tk.Frame(self.root, bg="#fff5e0")
        self.char_frame.grid(row=2, column=0, sticky="ew", padx=10, pady=5)
        chuvash_letters = ['”ê', '”ë', '”ñ', '”ó', '“™', '“´', '”≤', '”≥']
        for idx, ch in enumerate(chuvash_letters):
            b = tk.Button(self.char_frame, text=ch, font=("Arial", 11, "bold"),
                          bg="#ffd54f", fg="#5a0000", width=3, height=1,
                          relief=tk.RAISED, borderwidth=2, command=lambda c=ch: self.insert_letter(c))
            b.grid(row=0, column=idx, padx=3, pady=3)
        for i in range(len(chuvash_letters)):
            self.char_frame.grid_columnconfigure(i, weight=1)

        self.ocr_label = tk.Label(self.root, text="–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—á—É–≤–∞—à—Å–∫–∏–π):", font=("Arial", 10), bg="#fff5e0")
        self.ocr_label.grid(row=3, column=0, sticky="sw", padx=15, pady=(10, 0))

        self.text_box = tk.Text(self.root, height=8, font=("Arial", 14),
                                bg="#fffdf0", fg="#333333", relief=tk.SOLID, borderwidth=1, wrap=tk.WORD,
                                insertbackground="#5a0000")
        self.text_box.grid(row=4, column=0, sticky="nsew", padx=15, pady=(0, 5))

        self.translation_label = tk.Label(self.root, text="–ü–µ—Ä–µ–≤–æ–¥ (—Ä—É—Å—Å–∫–∏–π):", font=("Arial", 10),
                                          bg="#fff5e0")
        self.translation_label.grid(row=5, column=0, sticky="sw", padx=15, pady=(5, 0))

        self.translation_box = tk.Text(self.root, height=8, font=("Arial", 14),
                                       bg="#f0fff0", fg="#333333", relief=tk.SOLID, borderwidth=1, wrap=tk.WORD,
                                       state=tk.DISABLED)
        self.translation_box.grid(row=6, column=0, sticky="nsew", padx=15, pady=(0, 10))

        self.button_frame = tk.Frame(self.root, bg="#fff5e0")
        self.button_frame.grid(row=7, column=0, pady=(5, 15))

        btn_common_config = {"font": ("Arial", 11, "bold"), "relief": tk.RAISED,
                             "borderwidth": 2, "padx": 10, "pady": 5}

        self.load_button = tk.Button(self.button_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_image,
                                     bg="#ffd54f", fg="#5a0000", activebackground="#ffca28", **btn_common_config)
        self.load_button.pack(side=tk.LEFT, padx=5)

        self.recognize_button = tk.Button(self.button_frame, text="üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å", command=self.recognize_text,
                                          bg="#ef5350", fg="white", activebackground="#e53935",
                                          state=tk.DISABLED, **btn_common_config)
        self.recognize_button.pack(side=tk.LEFT, padx=5)

        self.translate_button = tk.Button(self.button_frame, text="üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏",
                                          command=self.translate_text_action,
                                          bg="#2196f3", fg="white", activebackground="#1976d2",
                                          state=tk.DISABLED, **btn_common_config)
        self.translate_button.pack(side=tk.LEFT, padx=5)

        self.save_button = tk.Button(self.button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_text,
                                     bg="#4caf50", fg="white", activebackground="#43a047",
                                     state=tk.DISABLED, **btn_common_config)
        self.save_button.pack(side=tk.LEFT, padx=5)

        self.clear_button = tk.Button(self.button_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", command=self.clear_all_fields,
                                      bg="#9e9e9e", fg="white", activebackground="#757575", **btn_common_config)
        self.clear_button.pack(side=tk.LEFT, padx=5)

        self.image_path = None
        self.tk_image = None
        self.original_pil_image = None

        print(f"DEBUG: API Token = '{self.yandex_cloud_api_token}'")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å
        print(f"DEBUG: Folder ID = '{self.yandex_cloud_folder_id}'")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å

        self.is_yandex_cloud_configured = False

        placeholder_api_token = "YOUR_YANDEX_API_TOKEN_PLACEHOLDER"  # –ë–æ–ª–µ–µ –æ–±—â–∏–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        placeholder_folder_id = "YOUR_YANDEX_FOLDER_ID_PLACEHOLDER"

        if self.yandex_cloud_api_token == placeholder_api_token or \
                self.yandex_cloud_folder_id == placeholder_folder_id or \
                not self.yandex_cloud_api_token or \
                not self.yandex_cloud_folder_id:
            print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: API-—Ç–æ–∫–µ–Ω –∏–ª–∏ FOLDER_ID –¥–ª—è Yandex Cloud Translate –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            messagebox.showwarning("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud API",
                                   "API-—Ç–æ–∫–µ–Ω –∏–ª–∏ FOLDER_ID –¥–ª—è Yandex Cloud Translate –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∫–æ–¥–µ.\n"
                                   "–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                                   "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö 'self.yandex_cloud_api_token' –∏ 'self.yandex_cloud_folder_id'.")
            self.translate_button.config(state=tk.DISABLED)
        else:
            self.is_yandex_cloud_configured = True
            print("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã Yandex Cloud Translate API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    def insert_letter(self, letter):
        self.text_box.insert(tk.INSERT, letter)
        self.text_box.focus_set()

    def _update_image_on_canvas(self, pil_image_to_display):
        self.root.update_idletasks()
        canvas_width = self.canvas.winfo_width()
        canvas_height = self.canvas.winfo_height()
        if canvas_width <= 1 or canvas_height <= 1:
            canvas_width, canvas_height = 600, 250
        img_w, img_h = pil_image_to_display.size
        aspect_ratio = img_w / img_h
        if img_w > canvas_width or img_h > canvas_height:
            if canvas_width / aspect_ratio <= canvas_height:
                new_w = canvas_width
                new_h = int(new_w / aspect_ratio)
            else:
                new_h = canvas_height
                new_w = int(new_h * aspect_ratio)
            pil_image_to_display = pil_image_to_display.resize((new_w, new_h), Image.LANCZOS)
        self.tk_image = ImageTk.PhotoImage(pil_image_to_display)
        self.canvas.delete("all")
        x_center = (self.canvas.winfo_width() - self.tk_image.width()) // 2
        y_center = (self.canvas.winfo_height() - self.tk_image.height()) // 2
        self.canvas.create_image(max(0, x_center), max(0, y_center), anchor=tk.NW, image=self.tk_image)

    def load_image(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            filetypes=[("–§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "*.png *.jpg *.jpeg *.bmp *.tiff *.tif"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")])
        if file_path:
            try:
                self.image_path = file_path
                pil_image = Image.open(file_path)
                self.original_pil_image = pil_image.copy()
                self._update_image_on_canvas(self.original_pil_image)
                self.label.config(text=os.path.basename(file_path), fg="#00695c")
                self.text_box.delete(1.0, tk.END)
                self.translation_box.config(state=tk.NORMAL)
                self.translation_box.delete(1.0, tk.END)
                self.translation_box.config(state=tk.DISABLED)
                self.recognize_button.config(state=tk.NORMAL)
                self.save_button.config(state=tk.DISABLED)
                if self.is_yandex_cloud_configured:
                    self.translate_button.config(state=tk.DISABLED)  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º, –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
                else:
                    self.translate_button.config(state=tk.DISABLED)

            except FileNotFoundError:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                self._reset_ui_for_new_image()
            except UnidentifiedImageError:
                messagebox.showerror("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞",
                                     f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(file_path)}\n"
                                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ PNG, JPG, BMP –∏–ª–∏ TIFF.")
                self._reset_ui_for_new_image()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
                self._reset_ui_for_new_image()

    def _reset_ui_for_new_image(self):
        self.image_path = None
        self.tk_image = None
        self.original_pil_image = None
        self.canvas.delete("all")
        self.label.config(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", fg="#a80000")
        self.text_box.delete(1.0, tk.END)
        self.translation_box.config(state=tk.NORMAL)
        self.translation_box.delete(1.0, tk.END)
        self.translation_box.config(state=tk.DISABLED)
        self.recognize_button.config(state=tk.DISABLED)
        self.save_button.config(state=tk.DISABLED)
        self.translate_button.config(state=tk.DISABLED)

    def preprocess_image_for_ocr(self, pil_img_original):
        try:
            pil_img_for_processing = pil_img_original.copy()
            if pil_img_for_processing.mode != 'L':
                pil_img_for_processing = pil_img_for_processing.convert('L')
            cv_image = np.array(pil_img_for_processing)
            _, thresh_image = cv2.threshold(cv_image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
            return thresh_image
        except cv2.error as ocve:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ OpenCV",
                                 f"–û—à–∏–±–∫–∞ OpenCV –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {ocve}\n"
                                 "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –∏–º–µ–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (PNG, JPG).")
            return None
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    def recognize_text(self):
        if not self.original_pil_image:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return

        self.label.config(text="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...", fg="#0d47a1")
        self.root.update_idletasks()
        e_local = None

        try:
            processed_image_cv = self.preprocess_image_for_ocr(self.original_pil_image)
            if processed_image_cv is None:
                self.label.config(text=os.path.basename(self.image_path) if self.image_path else "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω",
                                  fg="#a80000")
                return

            text = pytesseract.image_to_string(processed_image_cv, lang="chv")
            self.text_box.delete(1.0, tk.END)
            self.translation_box.config(state=tk.NORMAL)
            self.translation_box.delete(1.0, tk.END)
            self.translation_box.config(state=tk.DISABLED)

            if text.strip():
                self.text_box.insert(tk.END, text.strip())
                self.label.config(text="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", fg="#00695c")
                self.save_button.config(state=tk.NORMAL)
                if self.is_yandex_cloud_configured:
                    self.translate_button.config(state=tk.NORMAL)
                else:
                    self.translate_button.config(state=tk.DISABLED)
            else:
                messagebox.showwarning("–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n"
                                                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–ª–∏ —Å –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º.")
                self.label.config(text="–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω", fg="#a80000")
                self.save_button.config(state=tk.DISABLED)
                self.translate_button.config(state=tk.DISABLED)

        except pytesseract.TesseractNotFoundError:
            e_local = pytesseract.TesseractNotFoundError
            messagebox.showerror("–û—à–∏–±–∫–∞ Tesseract",
                                 "Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH, –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ tesseract.exe –≤ –∫–æ–¥–µ.")
            self.label.config(text="–û—à–∏–±–∫–∞: Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω", fg="#a80000")
            self.recognize_button.config(state=tk.DISABLED)
            self.translate_button.config(state=tk.DISABLED)
        except pytesseract.TesseractError as te:
            e_local = te
            messagebox.showerror("–û—à–∏–±–∫–∞ Tesseract",
                                 f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Tesseract: {te}\n–í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —è–∑—ã–∫–æ–≤–æ–π –ø–∞–∫–µ—Ç 'chv' –¥–ª—è Tesseract.")
            self.label.config(text="–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ 'chv'", fg="#a80000")
            self.translate_button.config(state=tk.DISABLED)
        except Exception as e:
            e_local = e
            messagebox.showerror("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            self.label.config(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏", fg="#a80000")
            self.translate_button.config(state=tk.DISABLED)
        finally:
            if self.image_path and not isinstance(e_local, pytesseract.TesseractNotFoundError):
                current_text_status = self.label.cget("text")
                if "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ" not in current_text_status and \
                        "–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω" not in current_text_status and \
                        "–û—à–∏–±–∫–∞" not in current_text_status:
                    self.label.config(text=os.path.basename(self.image_path), fg="#00695c")

    def translate_text_action(self):
        original_text = self.text_box.get("1.0", tk.END).strip()
        if not original_text:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            return

        if not self.is_yandex_cloud_configured:
            messagebox.showerror("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
                                 "API-—Ç–æ–∫–µ–Ω –∏–ª–∏ FOLDER_ID –¥–ª—è Yandex Cloud Translate –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n"
                                 "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            self.label.config(text="–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥. YC API", fg="#a80000")
            return

        self.label.config(text="–ü–µ—Ä–µ–≤–æ–¥ (Yandex Cloud)...", fg="#0d47a1")
        self.root.update_idletasks()

        try:
            url = "https://translate.api.cloud.yandex.net/translate/v2/translate"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            # IAM-—Ç–æ–∫–µ–Ω—ã –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "t1."
            # API-–∫–ª—é—á–∏ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞) –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "AQVN"
            auth_header_value = ""
            if self.yandex_cloud_api_token.startswith("t1."):
                auth_header_value = f"Bearer {self.yandex_cloud_api_token}"
            elif self.yandex_cloud_api_token.startswith("AQVN"):  # –û–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API-–∫–ª—é—á–∞
                auth_header_value = f"Api-Key {self.yandex_cloud_api_token}"
            else:  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —è—Å–µ–Ω, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ API-–∫–ª—é—á –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                # –ò–ª–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                messagebox.showwarning("–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞",
                                       "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ (API-–∫–ª—é—á –∏–ª–∏ IAM-—Ç–æ–∫–µ–Ω). –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ Api-Key.")
                auth_header_value = f"Api-Key {self.yandex_cloud_api_token}"

            headers = {
                "Content-Type": "application/json",
                "Authorization": auth_header_value
            }
            body = {
                "folderId": self.yandex_cloud_folder_id,
                "sourceLanguageCode": "cv",
                "targetLanguageCode": "ru",
                "texts": [original_text]  # API –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
            }

            response = requests.post(url, headers=headers, json=body, timeout=15)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)

            response_data = response.json()
            translations = response_data.get("translations")

            if translations and len(translations) > 0 and "text" in translations[0]:
                translated_text = translations[0]["text"]
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Ç–∞
                error_detail = response_data.get("message", "–û—Ç–≤–µ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–µ–≤–æ–¥–µ.")
                raise ValueError(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ API: {error_detail}")

            self.translation_box.config(state=tk.NORMAL)
            self.translation_box.delete(1.0, tk.END)
            self.translation_box.insert(tk.END, translated_text)
            self.translation_box.config(state=tk.DISABLED)

            self.label.config(text="–ü–µ—Ä–µ–≤–æ–¥ (YC) –∑–∞–≤–µ—Ä—à–µ–Ω", fg="#00695c")

        except requests.exceptions.HTTPError as http_err:
            error_message = f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex Cloud: {http_err}\n"
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞
                error_details = http_err.response.json()
                api_message = error_details.get('message', '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç API.')
                api_code = error_details.get('code', '')
                error_message += f"–ö–æ–¥: {api_code}, –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç API: {api_message}"
            except json.JSONDecodeError:
                error_message += f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ JSON): {http_err.response.text}"
            except AttributeError:  # –ï—Å–ª–∏ response –Ω–µ –∏–º–µ–µ—Ç json()
                error_message += f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {http_err.response.status_code}"
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (YC HTTP)", error_message)
            self.label.config(text="–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (YC HTTP)", fg="#a80000")
        except requests.exceptions.ConnectionError:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (YC)", "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")
            self.label.config(text="–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (YC)", fg="#a80000")
        except requests.exceptions.Timeout:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (YC)", "–¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex Cloud. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            self.label.config(text="–¢–∞–π–º-–∞—É—Ç (YC)", fg="#a80000")
        except ValueError as ve:  # –î–ª—è –Ω–∞—à–∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å –æ—Ç–≤–µ—Ç–æ–º API
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (YC)", f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–≤–µ—Ç–æ–º –æ—Ç Yandex Cloud: {ve}")
            self.label.config(text="–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ API (YC)", fg="#a80000")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (YC)",
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Yandex Cloud: {type(e).__name__}: {e}\n"
                                 "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API, —Ç–æ–∫–µ–Ω, Folder ID –∏ –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")
            self.label.config(text="–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (YC)", fg="#a80000")
        finally:
            current_status = self.label.cget("text")
            if "–ü–µ—Ä–µ–≤–æ–¥ (YC) –∑–∞–≤–µ—Ä—à–µ–Ω" not in current_status and \
                    "–û—à–∏–±–∫–∞" not in current_status and \
                    "–¢–∞–π–º-–∞—É—Ç" not in current_status and \
                    "—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" not in current_status:
                if self.text_box.get("1.0", tk.END).strip():
                    self.label.config(text="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", fg="#00695c")
                elif self.image_path:
                    self.label.config(text=os.path.basename(self.image_path), fg="#00695c")
                else:
                    self.label.config(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", fg="#a80000")

    def save_text(self):
        ocr_text = self.text_box.get("1.0", tk.END).strip()
        translated_text = ""
        original_state = self.translation_box.cget('state')
        self.translation_box.config(state=tk.NORMAL)
        translated_text = self.translation_box.get("1.0", tk.END).strip()
        self.translation_box.config(state=original_state)

        if not ocr_text and not translated_text:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return

        text_to_save = ""
        if ocr_text:
            text_to_save += "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —á—É–≤–∞—à—Å–∫–∏–π —Ç–µ–∫—Å—Ç:\n" + ocr_text + "\n\n"
        if translated_text:
            text_to_save += "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π (Yandex Cloud):\n" + translated_text + "\n"

        text_to_save = text_to_save.strip()

        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫...",
            defaultextension=".txt",
            filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")])
        if file_path:
            try:
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(text_to_save)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤:\n{file_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")

    def clear_all_fields(self):
        self._reset_ui_for_new_image()


if __name__ == "__main__":
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø—É—Ç—å, –µ—Å–ª–∏ Tesseract –Ω–µ –≤ PATH
    # pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    try:
        version = pytesseract.get_tesseract_version()
        print(f"Tesseract OCR (–≤–µ—Ä—Å–∏—è {version}) –Ω–∞–π–¥–µ–Ω.")
    except pytesseract.TesseractNotFoundError:
        print(
            "Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ tesseract.exe –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ PATH. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        messagebox.showerror("Tesseract –Ω–µ –Ω–∞–π–¥–µ–Ω",
                             "Tesseract OCR –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏/–∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ tesseract.exe –≤ –∫–æ–¥–µ.")
    except Exception as e:
        print(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å Tesseract: {e}")

    root = tk.Tk()
    root.geometry("800x850")
    root.minsize(600, 650)
    app = ChuvashOCRApp(root)

    root.mainloop()
